<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Schema;
use App\Models\{{MODEL_NAME}};

class {{MODEL_NAME}}Controller extends Controller
{
    public function index()
    {
        return view('{{TABLE_NAME}}.index');
    }

    public function create()
    {
    }

    public function store(Request $request)
    {
        $this->validate($request, [
            // Add validation rules for each field here
        ]);

        ${{TABLE_NAME}} = {{MODEL_NAME}}::create($request->all());

       return response()->json(["message" => '{{FOLDER_TABLE_NAME}} Saved Successfully']);
    }

    public function show($id)
    {

    }

    public function edit($id)
    {
        ${{TABLE_NAME}} = {{MODEL_NAME}}::findOrFail($id);

        return response()->json(${{TABLE_NAME}});
    }

    public function update(Request $request, $id)
    {
        $this->validate($request, [
            // Add validation rules for each field here
        ]);

        ${{TABLE_NAME}} = {{MODEL_NAME}}::findOrFail($id);
        ${{TABLE_NAME}}->update($request->all());

        return response()->json(["message" => '{{FOLDER_TABLE_NAME}} Updated Successfully']);
    }

    public function destroy($id)
    {
        ${{TABLE_NAME}} = {{MODEL_NAME}}::findOrFail($id);
        ${{TABLE_NAME}}->delete();

       return response()->json(["message" => '{{FOLDER_TABLE_NAME}} deleted Successfully']);
    }
     // get data
    public function getServerData()
    {
        try {
            $modelInstance = new {{MODEL_NAME}}; // Create an instance of the model to access fillable attributes
            $fillableAttributes = $modelInstance->getFillable();
            $tableHeader = collect($fillableAttributes)
            ->filter(function ($attribute) {
                return $attribute !== 'id';
            })
            ->map(function ($attribute) {

                $label = ucwords(str_replace('_', ' ', $attribute));
                return ['key' => $attribute, 'label' => $label];
            })
            ->values() // Re-index the array
            ->toArray();

            $data = {{MODEL_NAME}}::select(...$fillableAttributes)->get();

            return response()->json(['data'=> $data , 'tableHeader'=> $tableHeader], 200);
        } catch (\Exception $exception) {
            return response()->json(['error' => $exception->getMessage()], 500);
        }
    }

     public function getTableColumns()
    {
        $tableName = '{{TABLE_NAME}}';

        // Get the columns of the table
        $columns = Schema::getColumnListing($tableName);
        // dd($columns);
        // Get the data types of the columns, excluding 'created_at' and 'updated_at'
         $columnTypes = [];
        foreach ($columns as $column) {
            if ($column != 'created_at' && $column != 'updated_at') {
                $columnType = Schema::getConnection()->getDoctrineColumn($tableName, $column)->getType()->getName();

                // Check if the column is unsigned
                if ($columnType === 'integer' && Schema::getConnection()->getDoctrineColumn($tableName, $column)->getUnsigned()) {
                    $columnType = 'unsignedInteger';
                }

                $columnTypes[$column] = $columnType;
            }
        }
        // Map data types to corresponding HTML input types
        $inputTypes = [
            'string' => 'text',
            'text' => 'textarea',
            'integer' => 'number',
            'datetime' => 'date-picker',
            'unsignedInteger' => 'treeSelect',
            // Add more data type mappings as needed
        ];

         // Define required fields
        //$requiredFields = ['name', 'email'];
        // Prepare an array with labels and input types, excluding boolean columns
        $fieldsData = [];
        foreach ($columnTypes as $column => $type) {
            if ($column !== 'id' && $column !== 'is_active' && $type !== 'boolean') {
                $fieldsData[] = [
                    'label' => ucwords(str_replace('_', ' ', $column)),
                    'name' => $column,
                    'type' => $inputTypes[$type] ?? 'text',
                   // 'required' => in_array($column, $requiredFields),
                ];
            }
        }

        return response()->json(['fields_data' => $fieldsData]);
    }

    public function updateStatus($id){

        ${{TABLE_NAME}} = {{MODEL_NAME}}::findOrFail($id);

        ${{TABLE_NAME}}->is_active = !${{TABLE_NAME}}->is_active;

        ${{TABLE_NAME}}->save();

        return response()->json(['message' => 'Status updated successfully', 200]);

    }

}
